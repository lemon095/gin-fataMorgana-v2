package utils

import (
	"errors"
	"regexp"
	"strconv"
	"strings"
)

// BankCardValidator 银行卡校验器
type BankCardValidator struct{}

// NewBankCardValidator 创建银行卡校验器
func NewBankCardValidator() *BankCardValidator {
	return &BankCardValidator{}
}

// ValidateCardNumber 验证银行卡号
func (v *BankCardValidator) ValidateCardNumber(cardNumber string) error {
	// 1. 基本格式验证
	if err := v.validateBasicFormat(cardNumber); err != nil {
		return err
	}

	// 2. Luhn算法校验
	if !v.luhnCheck(cardNumber) {
		return errors.New("银行卡号校验失败，请检查卡号是否正确")
	}

	// 3. BIN码验证
	if err := v.validateBIN(cardNumber); err != nil {
		return err
	}

	return nil
}

// validateBasicFormat 基本格式验证
func (v *BankCardValidator) validateBasicFormat(cardNumber string) error {
	// 去除空格
	cardNumber = strings.ReplaceAll(cardNumber, " ", "")
	
	// 检查长度
	if len(cardNumber) < 13 || len(cardNumber) > 19 {
		return errors.New("银行卡号长度不正确，应为13-19位")
	}

	// 检查是否全为数字
	if !regexp.MustCompile(`^\d+$`).MatchString(cardNumber) {
		return errors.New("银行卡号只能包含数字")
	}

	return nil
}

// luhnCheck Luhn算法校验
func (v *BankCardValidator) luhnCheck(cardNumber string) bool {
	sum := 0
	alternate := false

	// 从右到左遍历
	for i := len(cardNumber) - 1; i >= 0; i-- {
		digit, _ := strconv.Atoi(string(cardNumber[i]))

		if alternate {
			digit *= 2
			if digit > 9 {
				digit = digit%10 + digit/10
			}
		}

		sum += digit
		alternate = !alternate
	}

	return sum%10 == 0
}

// validateBIN 验证BIN码（银行卡前6位）
func (v *BankCardValidator) validateBIN(cardNumber string) error {
	if len(cardNumber) < 6 {
		return errors.New("银行卡号长度不足，无法验证BIN码")
	}

	bin := cardNumber[:6]
	
	// 常见银行BIN码验证
	bankBINs := map[string]string{
		// 中国工商银行
		"620200": "工商银行",
		"620302": "工商银行",
		"622200": "工商银行",
		"622202": "工商银行",
		"622203": "工商银行",
		"622208": "工商银行",
		"622210": "工商银行",
		"622215": "工商银行",
		"622220": "工商银行",
		"622225": "工商银行",
		"622230": "工商银行",
		"622235": "工商银行",
		"622240": "工商银行",
		"622245": "工商银行",
		"622250": "工商银行",
		"622255": "工商银行",
		"622260": "工商银行",
		"622265": "工商银行",
		"622270": "工商银行",
		"622275": "工商银行",
		"622280": "工商银行",
		"622285": "工商银行",
		"622290": "工商银行",
		"622295": "工商银行",
		"622300": "工商银行",
		"622305": "工商银行",
		"622310": "工商银行",
		"622315": "工商银行",
		"622320": "工商银行",
		"622325": "工商银行",
		"622330": "工商银行",
		"622335": "工商银行",
		"622340": "工商银行",
		"622345": "工商银行",
		"622350": "工商银行",
		"622355": "工商银行",
		"622360": "工商银行",
		"622365": "工商银行",
		"622370": "工商银行",
		"622375": "工商银行",
		"622380": "工商银行",
		"622385": "工商银行",
		"622390": "工商银行",
		"622395": "工商银行",
		"622400": "工商银行",
		"622405": "工商银行",
		"622410": "工商银行",
		"622415": "工商银行",
		"622420": "工商银行",
		"622425": "工商银行",
		"622430": "工商银行",
		"622435": "工商银行",
		"622440": "工商银行",
		"622445": "工商银行",
		"622450": "工商银行",
		"622455": "工商银行",
		"622460": "工商银行",
		"622465": "工商银行",
		"622470": "工商银行",
		"622475": "工商银行",
		"622480": "工商银行",
		"622485": "工商银行",
		"622490": "工商银行",
		"622495": "工商银行",
		"622500": "工商银行",
		"622505": "工商银行",
		"622510": "工商银行",
		"622515": "工商银行",
		"622520": "工商银行",
		"622525": "工商银行",
		"622530": "工商银行",
		"622535": "工商银行",
		"622540": "工商银行",
		"622545": "工商银行",
		"622550": "工商银行",
		"622555": "工商银行",
		"622560": "工商银行",
		"622565": "工商银行",
		"622570": "工商银行",
		"622575": "工商银行",
		"622580": "工商银行",
		"622585": "工商银行",
		"622590": "招商银行",
		"622591": "招商银行",
		"622592": "招商银行",
		"622593": "招商银行",
		"622594": "招商银行",
		"622596": "招商银行",
		"622597": "招商银行",
		"622598": "招商银行",
		"622599": "招商银行",

		// 中国建设银行
		"436742": "建设银行",
		"436745": "建设银行",
		"436748": "建设银行",
		"436752": "建设银行",
		"436753": "建设银行",
		"436754": "建设银行",
		"436755": "建设银行",
		"436756": "建设银行",
		"436757": "建设银行",
		"436758": "建设银行",
		"436759": "建设银行",
		"436760": "建设银行",
		"436761": "建设银行",
		"436762": "建设银行",
		"436763": "建设银行",
		"436764": "建设银行",
		"436765": "建设银行",
		"436766": "建设银行",
		"436767": "建设银行",
		"436768": "建设银行",
		"436769": "建设银行",
		"436770": "建设银行",
		"436771": "建设银行",
		"436772": "建设银行",
		"436773": "建设银行",
		"436774": "建设银行",
		"436775": "建设银行",
		"436776": "建设银行",
		"436777": "建设银行",
		"436778": "建设银行",
		"436779": "建设银行",
		"436780": "建设银行",
		"436781": "建设银行",
		"436782": "建设银行",
		"436783": "建设银行",
		"436784": "建设银行",
		"436785": "建设银行",
		"436786": "建设银行",
		"436787": "建设银行",
		"436788": "建设银行",
		"436789": "建设银行",
		"436790": "建设银行",
		"436791": "建设银行",
		"436792": "建设银行",
		"436793": "建设银行",
		"436794": "建设银行",
		"436795": "建设银行",
		"436796": "建设银行",
		"436797": "建设银行",
		"436798": "建设银行",
		"436799": "建设银行",

		// 中国农业银行
		"103": "农业银行",
		"622848": "农业银行",
		"622849": "农业银行",
		"622851": "农业银行",
		"622852": "农业银行",
		"622853": "农业银行",
		"622854": "农业银行",
		"622856": "农业银行",
		"622857": "农业银行",
		"622858": "农业银行",
		"622859": "农业银行",
		"622861": "农业银行",
		"622862": "农业银行",
		"622863": "农业银行",
		"622864": "农业银行",
		"622866": "农业银行",
		"622867": "农业银行",
		"622868": "农业银行",
		"622869": "农业银行",
		"622871": "农业银行",
		"622872": "农业银行",
		"622873": "农业银行",
		"622874": "农业银行",
		"622876": "农业银行",
		"622877": "农业银行",
		"622878": "农业银行",
		"622879": "农业银行",
		"622881": "农业银行",
		"622882": "农业银行",
		"622883": "农业银行",
		"622884": "农业银行",
		"622886": "农业银行",
		"622887": "农业银行",
		"622888": "农业银行",
		"622889": "农业银行",
		"622891": "农业银行",
		"622892": "农业银行",
		"622893": "农业银行",
		"622894": "农业银行",
		"622896": "农业银行",
		"622897": "农业银行",
		"622898": "农业银行",
		"622899": "农业银行",

		// 中国银行
		"456351": "中国银行",
		"456352": "中国银行",
		"456353": "中国银行",
		"456354": "中国银行",
		"456355": "中国银行",
		"456356": "中国银行",
		"456357": "中国银行",
		"456358": "中国银行",
		"456359": "中国银行",
		"456360": "中国银行",
		"456361": "中国银行",
		"456362": "中国银行",
		"456363": "中国银行",
		"456364": "中国银行",
		"456365": "中国银行",
		"456366": "中国银行",
		"456367": "中国银行",
		"456368": "中国银行",
		"456369": "中国银行",
		"456370": "中国银行",
		"456371": "中国银行",
		"456372": "中国银行",
		"456373": "中国银行",
		"456374": "中国银行",
		"456375": "中国银行",
		"456376": "中国银行",
		"456377": "中国银行",
		"456378": "中国银行",
		"456379": "中国银行",
		"456380": "中国银行",
		"456381": "中国银行",
		"456382": "中国银行",
		"456383": "中国银行",
		"456384": "中国银行",
		"456385": "中国银行",
		"456386": "中国银行",
		"456387": "中国银行",
		"456388": "中国银行",
		"456389": "中国银行",
		"456390": "中国银行",
		"456391": "中国银行",
		"456392": "中国银行",
		"456393": "中国银行",
		"456394": "中国银行",
		"456395": "中国银行",
		"456396": "中国银行",
		"456397": "中国银行",
		"456398": "中国银行",
		"456399": "中国银行",

		// 交通银行
		"405512": "交通银行",
		"434910": "交通银行",
		"458123": "交通银行",
		"458124": "交通银行",
		"520169": "交通银行",
		"522964": "交通银行",
		"552853": "交通银行",
		"622251": "交通银行",
		"622252": "交通银行",
		"622253": "交通银行",
		"622254": "交通银行",
		"622256": "交通银行",
		"622257": "交通银行",
		"622258": "交通银行",
		"622259": "交通银行",
		"622261": "交通银行",
		"622262": "交通银行",
		"622263": "交通银行",
		"622264": "交通银行",
		"622266": "交通银行",
		"622267": "交通银行",
		"622268": "交通银行",
		"622269": "交通银行",
		"622271": "交通银行",
		"622272": "交通银行",
		"622273": "交通银行",
		"622274": "交通银行",
		"622276": "交通银行",
		"622277": "交通银行",
		"622278": "交通银行",
		"622279": "交通银行",
		"622281": "交通银行",
		"622282": "交通银行",
		"622283": "交通银行",
		"622284": "交通银行",
		"622286": "交通银行",
		"622287": "交通银行",
		"622288": "交通银行",
		"622289": "交通银行",
		"622291": "交通银行",
		"622292": "交通银行",
		"622293": "交通银行",
		"622294": "交通银行",
		"622296": "交通银行",
		"622297": "交通银行",
		"622298": "交通银行",
		"622299": "交通银行",
	}

	// 检查BIN是否在已知银行列表中
	if _, exists := bankBINs[bin]; exists {
		// 这里可以添加银行名称一致性检查
		// 如果用户输入的银行名称与BIN码对应的银行不一致，可以给出警告
		return nil
	}

	// 如果BIN码不在已知列表中，给出警告但不阻止绑定
	// 在实际项目中，可以根据需要决定是否允许未知BIN码
	return nil
}

// GetBankNameByBIN 根据BIN码获取银行名称
func (v *BankCardValidator) GetBankNameByBIN(cardNumber string) string {
	if len(cardNumber) < 6 {
		return ""
	}

	bin := cardNumber[:6]
	
	// 这里可以返回BIN码对应的银行名称
	// 为了简化，这里只返回一些常见的银行名称
	bankBINs := map[string]string{
		"622202": "工商银行",
		"622848": "农业银行",
		"436742": "建设银行",
		"456351": "中国银行",
		"622588": "招商银行",
		"622250": "交通银行",
	}

	if bankName, exists := bankBINs[bin]; exists {
		return bankName
	}

	return ""
}

// ValidateCardHolder 验证持卡人姓名
func (v *BankCardValidator) ValidateCardHolder(cardHolder string) error {
	// 去除空格
	cardHolder = strings.TrimSpace(cardHolder)
	
	// 检查长度
	if len(cardHolder) < 2 || len(cardHolder) > 20 {
		return errors.New("持卡人姓名长度不正确，应为2-20个字符")
	}

	// 检查是否包含特殊字符（只允许中文、英文、空格）
	if !regexp.MustCompile(`^[\u4e00-\u9fa5a-zA-Z\s]+$`).MatchString(cardHolder) {
		return errors.New("持卡人姓名只能包含中文、英文和空格")
	}

	return nil
}

// ValidateBankName 验证银行名称
func (v *BankCardValidator) ValidateBankName(bankName string) error {
	// 去除空格
	bankName = strings.TrimSpace(bankName)
	
	// 检查长度
	if len(bankName) < 2 || len(bankName) > 50 {
		return errors.New("银行名称长度不正确，应为2-50个字符")
	}

	// 检查是否包含特殊字符（只允许中文、英文、数字、空格）
	if !regexp.MustCompile(`^[\u4e00-\u9fa5a-zA-Z0-9\s]+$`).MatchString(bankName) {
		return errors.New("银行名称只能包含中文、英文、数字和空格")
	}

	return nil
} 